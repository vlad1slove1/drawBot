import { GoogleSpreadsheet } from 'google-spreadsheet';
import { MongoClient, ServerApiVersion } from 'mongodb';
import { config } from 'dotenv';

config();

const {
  MONGO_HOST,
  MONGO_DB_NAME,
  MONGO_PARTICIPANTS_COLL,
  GOOGLE_SPREADSHEET_ID,
  GOOGLE_SERVICE_ACCOUNT_EMAIL,
  GOOGLE_PRIVATE_KEY,
} = process.env;

// url к локальной датабазе
const uri = `mongodb://${MONGO_HOST}`;

// создание клиента mongodb для подключения к датабазе
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

/**
 * Сначала обнуляем коллекцию, затем загружаем новую
 *
 * @param {Array} data Массив объектов
 */
const addUsersToDb = async (data) => {
  try {
    await client.connect();
    // console.log('You successfully connected to MongoDB!');

    const database = client.db(MONGO_DB_NAME);
    const participantsColl = database.collection(MONGO_PARTICIPANTS_COLL);

    await participantsColl.deleteMany();
    await participantsColl.insertMany(data);
  } finally {
    await client.close();
  }
};

/**
 * Получаем всю коллекцию участников
 *
 * @returns {Promise} array of objects (массив объектов)
 */
const getParticipantsCollection = async () => {
  try {
    await client.connect();
    // console.log('You successfully connected to MongoDB!');

    const database = client.db(MONGO_DB_NAME);
    const participantsColl = database.collection(MONGO_PARTICIPANTS_COLL);

    const match = await participantsColl.find().toArray((err, res) => {
      if (err) throw err;

      return res;
    });

    return match;
  } finally {
    await client.close();
  }
};

/**
 * Подключаемся к гугл табличке по:
 * GOOGLE_SPREADSHEET_ID, GOOGLE_SERVICE_ACCOUNT_EMAIL, GOOGLE_PRIVATE_KEY
 * сначала очищаем всю таблицу
 * затем копируем все документы из БД в таблицу
 */
export const syncSheetsToMongo = async () => {
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(GOOGLE_SPREADSHEET_ID);

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: GOOGLE_PRIVATE_KEY,
  });

  await doc.loadInfo(); // loads document properties and worksheets

  // Выбираем первый лист
  const sheet = doc.sheetsByIndex[0];
  // Очищаем лист, начиная со второй строки
  await sheet.clear(`A2:E${sheet.rowCount}`);

  // Загружаем коллекцию в гугл табличку
  getParticipantsCollection().then(async (res) => {
    await sheet.addRows(res, { startIndex: 2, insert: false });
  });
};

/**
 * Функция для обработки входящего POST запроса
 * с данными в request.data
 * делаем парсинг данных и загружаем в базу данных
 *
 * @param {JSON} data данные из req.data
 * @returns expression
 */
export const handleRequestData = async (data) => {
  const parsedFile = JSON.parse(data);

  const coupons = parsedFile.Coupon.items;
  const users = parsedFile.Users.items;

  const resultingArray = [];

  coupons.forEach((coupon) => {
    const userMatch = users.find((user) => user.Uid === coupon.Uiduser);
    const couponsCount = coupons.filter((item) => userMatch.Uid === item.Uiduser);

    const parsedCoupon = {
      'Код купона': coupon.Number,
      Покупатель: userMatch.Name,
      Телефон: userMatch.Telephone,
      'Кол-во купонов у покупателя': couponsCount.length,
    };

    resultingArray.push(parsedCoupon);
  });

  return addUsersToDb(resultingArray);
};
